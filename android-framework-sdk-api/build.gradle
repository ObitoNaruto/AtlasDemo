//apply plugin: 'com.taobao.atlas.library'
apply plugin: 'com.android.library'

//atlas {
//    bundleConfig {
//        awbBundle true
//    }
////    buildTypes {
////        debug {
////            baseApFile project.rootProject.file('app/build/outputs/apk/app-debug.ap')
////        }
////    }
//
//    tBuildConfig {
//        //引用了几个插件并没有配为自启动，那根据文档只能通过触发插件中Component的加载而启动插件，比如start一个bundle中的activity或者service。或者是通过手动调用代码加载一个插件(http://atlas.taobao.org/docs/guide-for-use/guide_for_bundle.html).
//        autoStartBundles = ['com.mobile.android.android.framework.sdk.biz'] //自启动bundle配置
//        outOfApkBundles = ['remotebundle']//不把bundle编译进APK，在客户端使用时下载后加载
////        preLaunch = 'com.taobao.demo.DemoPreLaunch'//AppApplication启动之前调用
//        classInject false
//        dataBindingBundles = ['com.taobao.databindbundle', 'com.mobile.android.launcher']
//    }
//}
//group = 'com.atlas.demo'
group = 'com.mobile.android.framework'
version = '1.0.0'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
//    providedCompile "com.android.support:appcompat-v7:$rootProject.ext.appcompat_v7Version"
//    providedCompile "com.android.support.constraint:constraint-layout:$rootProject.ext.constraint_layoutVersion"

    compile project(':middlewarelibrary')
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    from('src/main') {
        include '**'
    }
    classifier = 'sources'
}

publishing {
    // 指定仓库位置
    repositories {
        mavenLocal()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact "${project.buildDir}/outputs/awb/${project.name}-debug.awb"
            artifact sourcesJar
            artifactId "framework-api"

            pom.withXml {
                def dependenciesNode
                def providedCompileDependencies = configurations.providedCompile.allDependencies
                configurations.compile.allDependencies.each {
                    if (it.group && it.name && it.version && !isInProvidedCompile(providedCompileDependencies, it)) {
                        if (!dependenciesNode) {
                            dependenciesNode = asNode().appendNode('dependencies')
                        }

                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

boolean isInProvidedCompile(providedCompileDependencies, compileDependency) {
    boolean isInProvidedCompile = false
    providedCompileDependencies.each {
        if (!isInProvidedCompile && it.group == compileDependency.group &&
                it.name == compileDependency.name) {
            isInProvidedCompile = true
        }
    }
    return isInProvidedCompile
}
