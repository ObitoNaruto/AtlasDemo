if (isBundle.toBoolean()) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}
apply plugin: 'com.taobao.atlas'

atlas {
    bundleConfig {
        awbBundle true
    }
    buildTypes {
        debug {
            baseApFile project.rootProject.file('app/build/outputs/apk/app-debug.ap')
        }
    }
}
//group = 'com.atlas.demo'
group = 'com.taobao.demo'
version = '1.0.2'


android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"


    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    //编译时引入，不打入当前awb包中
    providedCompile project(':middlewarelibrary')
    providedCompile project(':publicbundle')

//    compile 'com.android.support.constraint:constraint-layout:1.0.0'
//    providedCompile 'com.android.support:support-v4:25.3.0'
//    providedCompile 'com.android.support:appcompat-v7:25.1.0'
//    providedCompile 'com.android.support.constraint:constraint-layout:1.0.0-alpha8'
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

task sourcesJar(type: Jar) {
    from('src/main') {
        include '**'
    }
    classifier = 'sources'
}

publishing {
    // 指定仓库位置
    repositories {
        mavenLocal()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact "${project.buildDir}/outputs/awb/${project.name}-debug.awb"
            artifact sourcesJar
            artifactId "firstbundle"

            pom.withXml {
                def dependenciesNode
                def providedCompileDependencies = configurations.providedCompile.allDependencies
                configurations.compile.allDependencies.each {
                    if(it.group && it.name && it.version && !isInProvidedCompile(providedCompileDependencies, it)) {
                        if(!dependenciesNode) {
                            dependenciesNode = asNode().appendNode('dependencies')
                        }

                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
}

boolean isInProvidedCompile(providedCompileDependencies, compileDependency) {
    boolean isInProvidedCompile = false
    providedCompileDependencies.each {
        if(!isInProvidedCompile && it.group == compileDependency.group &&
        it.name == compileDependency.name) {
            isInProvidedCompile = true
        }
    }
    return isInProvidedCompile
}
